<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
        <context:component-scan base-package="com.dj.spring"/><!-- 在哪个包里搜索控制类Java文件,可以设置多个扫描包 --> 
        <!-- 默认的注解映射的支持，自动注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter -->  
    	<mvc:annotation-driven />  
    	<!-- 打开Spring的Annotation支持 -->
    	<context:annotation-config />
  
	    <!-- 视图解释类,设置返回路径以及文件格式 -->  
	    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
	        <property name="prefix" value="/jsp/"/>  
	        <property name="suffix" value=".jsp"/>  
	        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />  
	    </bean> 
	    <!-- 配置SessionFactory -->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- <property name="dataSource" ref="dataSource" /> -->
        <property name="configLocation" value="classpath:hibernate.cfg.xml" />
        <property name="packagesToScan" value="com.Entity" />
    </bean>
    <!-- 配置Dao要注入的hibernateTemplate -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <!-- 配置Spring的事务处理 -->
    <!-- 创建事务管理器 -->
    <bean id="txManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <!-- 配置AOP。Spring是通过AOP来进行事务管理的 -->
    <aop:config>
        <!-- 设置pointCut表示哪些方法要增加事务处理 -->
        <!-- 下面的事务是声明在DAO中，可是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时假设在运行了一个步骤之后抛出异常 
            就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service。这也就是Spring所提供的一个很方便的工具。声明式事务 -->
        <aop:pointcut id="allMethods" expression="execution(* com.MyInterface.*.*(..))" />
        <!-- 通过advisor来确定详细要增加事务控制的方法 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
    </aop:config>
    <!-- 配置哪些方法要增加事务控制 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 让全部的方法都增加事务管理，为了提高效率。能够把一些查询之类的方法设置为仅仅读的事务 -->
            <tx:method name="*" propagation="REQUIRED" read-only="true" />
            <!-- 下面方法都是可能设计改动的方法。就无法设置为仅仅读 -->
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <!-- 开启事务注解 -->
    <tx:annotation-driven />
	    
	    <!-- ==============上传，下载文件的设置==================== -->
	    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
	    	<property name="maxUploadSize" value="2048000000"></property>
	    </bean>
        <!-- 对静态资源的映射，否则加载不到-->
	    <mvc:resources mapping="/js/**" location="/js/" />
	    <mvc:resources mapping="/css/**" location="/css/" />
	    <mvc:resources mapping="/img/**" location="/img/" />
</beans>