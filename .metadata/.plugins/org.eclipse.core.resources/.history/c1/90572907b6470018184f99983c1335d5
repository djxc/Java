package MyEmail;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMessage.RecipientType;

public class myEmail {
	public static void main(String[] args) throws MessagingException, IOException {
		myEmail email = new myEmail();
		email.mail_163("2276771363@qq.com", "注册成功", "尊敬的姜晓翠女士你好,感谢你来到徐州游玩,您的到来是对我们最大的肯定!");
	}
	
	/**
	 * 利用qq邮箱进行发送邮件
	 * 1.构建邮件配置信息
	 * 2.构建授权信息
	 * 3.生成邮件回话
	 * 4.创建邮件
	 * 5.发送邮件
	 * @param strMail
	 * @param strTitle
	 * @param strText
	 * @throws MessagingException
	 */
	private void mail_QQ(String strMail, String strTitle, String strText) throws MessagingException{
		 // 配置发送邮件的环境属性
        final Properties props = new Properties();
        /*
         * 可用的属性： mail.store.protocol / mail.transport.protocol / mail.host /
         * mail.user / mail.from
         */
        // 表示SMTP发送邮件，需要进行身份验证
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.qq.com");
        props.put("mail.transport.protocol", "smtp");
        props.put("mail.debug", "true");	//遇到最多的坑就是下面这行，不加要报“A secure connection is requiered”错。
        props.put("mail.smtp.starttls.enable", "true");
        // 发件人的账号
        props.put("mail.user", "1278349695@qq.com");
        // 访问SMTP服务时需要提供的密码
        props.put("mail.password", "ukjzpxnwwzoggedd");		//ukjzpxnwwzoggedd
 
        // 构建授权信息，用于进行SMTP进行身份验证
        Authenticator authenticator = new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                // 用户名、密码
                String userName = props.getProperty("mail.user");
                String password = props.getProperty("mail.password");
                return new PasswordAuthentication(userName, password);
            }
        };
        // 使用环境属性和授权信息，创建邮件会话
        Session mailSession = Session.getInstance(props, authenticator);
        MimeMessage message = createMessage(mailSession, props, strMail, strTitle, strText);
 
        // 发送邮件
        Transport.send(message);
	}
	
	
	/**
	 * 利用163邮箱进行发送邮件
	 * 1.创建邮件配置信息
	 * 2.构建授权信息
	 * 3.生成邮件回话
	 * 4.创建邮件
	 * 5.发送邮件
	 * @param strMail	要接受邮件的邮件地址
	 * @param strTitle	邮件的标题
	 * @param strText	邮件的正文
	 * @throws MessagingException
	 */
	private void mail_163(String strMail, String strTitle, String strText) throws MessagingException{
		final Properties props = new Properties();  
        props.put("mail.smtp.auth", "true");  
        props.put("mail.smtp.host", "smtp.163.com");  

        // 发件人的账号  
        props.put("mail.user", "dj_jxc@163.com");  
        //发件人的密码  
        props.put("mail.password", "123xc321"); 
    	// 构建授权信息，用于进行SMTP进行身份验证  
        Authenticator authenticator = new Authenticator() {  
            @Override  
            protected PasswordAuthentication getPasswordAuthentication() {  
                // 用户名、密码  
                String userName = props.getProperty("mail.user");  
                String password = props.getProperty("mail.password");  
                return new PasswordAuthentication(userName, password);  
            }  
        };  
        // 使用环境属性和授权信息，创建邮件会话  
        Session mailSession = Session.getInstance(props, authenticator);  
        
        MimeMessage message = createMessage(mailSession, props, strMail, strTitle, strText);
        
        // 发送邮件  
        Transport.send(message);  
	} 
	
	/**
	 * 创建一封只包含文本的简单邮件
     * 1.通过session对话创建一个新的邮件
     * 2.设置发送人邮箱昵称
     * 3.设置收件人的邮箱昵称
     * 4.设置邮件的主题
     * 5.设置邮箱的正文
     * 6.设置日期
     * 7.保存编辑
	 * @param mailSession	对话
	 * @param props		包含邮件设置的配置信息
	 * @param toUser	发送给的用户邮箱
	 * @param title		邮件的标题
	 * @param mail_content		邮件的正文
	 * @return
	 * @throws MessagingException
	 */
	private MimeMessage createMessage(Session mailSession, Properties props,
			String toUser, String title, String mail_content)
			throws MessagingException{
		// 创建邮件消息,通过session对话创建一个新的邮件
        MimeMessage message = new MimeMessage(mailSession);
        // 设置发件人及其昵称
        InternetAddress form = new InternetAddress(
                props.getProperty("mail.user"));
        message.setFrom(form);
 
        // 设置收件人
        InternetAddress to = new InternetAddress(toUser);
        message.setRecipient(RecipientType.TO, to);
 
        // 设置邮件标题
        message.setSubject(title);        
 
        // 设置邮件的内容体
        message.setContent(mail_content, "text/html;charset=UTF-8");
        
        message.setSentDate(new Date()); 	//设置邮件发送时间
        return message;
	}

}
